package com.tdiprima.io;import java.io.*;import java.nio.file.*;import java.util.*;public class DirectoryWalker {    private static ArrayList<String> fileNames = new ArrayList<>();    private static final String PATH = System.getProperty("user.home") + "/IdeaProjects/api-v3/nuclear-segmentation-results/mongodb/src/main/java/u24/mongodb/nuclear/segmentation";    /**     * Walk through directory tree, find files, add names to list.     */    public static void walk() {        try {            Files.walk(Paths.get(PATH)).forEach(filePath -> {                if (Files.isRegularFile(filePath)) {                    String name = String.valueOf(filePath.getFileName());                    fileNames.add(name);                }            });        } catch (IOException e) {            e.printStackTrace();        }    }    public static void read(String fileName) {        System.out.println(fileName.substring(0, fileName.indexOf(".")) + ":");        String line;        Set mySet = new HashSet<>();        try {            FileReader fileReader                    = new FileReader(PATH + "/" + fileName);            BufferedReader bufferedReader                    = new BufferedReader(fileReader);            int count = 0;            int count1 = 0;            while ((line = bufferedReader.readLine()) != null) {                for (int i = 0; i < fileNames.size(); i++) {                    String name = fileNames.get(i);                    name = name.substring(0, name.indexOf("."));                    if (line.contains(name)) {                        mySet.add(name);                    }                }                if (line.contains("DBObject")) {                    count++;                }                if (line.contains("BasicDBList")) {                    count1++;                }            }            System.out.println("\tDBObject count: " + count);            System.out.println("\tDBList count: " + count1);            Iterator it = mySet.iterator();            System.out.println("\tPrograms accessed:");            while (it.hasNext()) {                System.out.println("\t\t" + it.next());            }            bufferedReader.close();        } catch (FileNotFoundException ex) {            System.out.println(                    "Unable to open file '"                    + fileName + "'");        } catch (IOException ex) {            System.out.println(                    "Error reading file '"                    + fileName + "'");            // Or we could just do this:            // ex.printStackTrace();        }    }    public static void main(String[] args) {        //final File folder = new File(PATH);        //listFilesForFolder(folder);        walk();        for (int i = 0; i < fileNames.size(); i++) {            String name = fileNames.get(i);            read(name);        }    }    public static void listFilesForFolder(final File folder) {        for (final File fileEntry : folder.listFiles()) {            if (fileEntry.isDirectory()) {                listFilesForFolder(fileEntry);            } else {                System.out.println(fileEntry.getName());            }        }    }    public static void listFilesFolder() {        File folder = new File(PATH);        File[] listOfFiles = folder.listFiles();        for (int i = 0; i < listOfFiles.length; i++) {            if (listOfFiles[i].isFile()) {                System.out.println("File " + listOfFiles[i].getName());            } else if (listOfFiles[i].isDirectory()) {                System.out.println("Directory " + listOfFiles[i].getName());            }        }    }}